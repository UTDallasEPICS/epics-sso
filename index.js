//Still trying to figure out what is what

require('dotenv').config();

//passport
const passport = require('passport');

//This is a SAML 2.0 authentication provider for Passport, the Node.js authentication library.
const saml = require('passport-saml');

//this package will allow us to parswe the metadata without having to manually replace it
const metadata = require('passport-saml-metadata'); 

//helps wuth reading the file
const fileCache = require('file-system-cache').default;

//Utilities for reading configuration from SAML 2.0 Metadata XML files, 
//such as those generated by Active Directory Federation Services (ADFS).
//Fetch: When called, it will attempt to load the metadata XML from the supplied URL.
//toPassportConfig: Transforms metadata extracts for use in Passport strategy configuration
const { fetch, toPassportConfig, claimsToCamelCase } = require('passport-saml-metadata');

//cert auth?
const SamlStrategy = require('passport-wsfed-saml2').Strategy;

//cache files used incase url cant be accessed
const backupStore = fileCache({ basePath: os.tmpdir() });

//currently using test metadata url
const url = 'https://idptest.utdallas.edu/idp/shibboleth';

//login point
const utdIdLoginPoint = "https://idptest.utdallas.edu/idp/profile/SAML2/Redirect/SSO"

//basic info
/*
{
    entryPoint:'https://idptest.utdallas.edu/idp/profile/SAML2/Redirect/SSO' , url given by IdP if user is not authenticated on the page
    issuer: 'epics-sso', unique name so IdP can identify SP, which is us
    callbackUrl:'', once authentication is done IdP will call this URL, which we dont have?

    below is the certificate that is used to build trust between IdP and SP
    cert: 'MIIDOzCCAiOgAwIBAgIUSwQBiQU7l2qsaU0XGxhXS1s0MgQwDQYJKoZIhvcNAQEL BQAwHzEdMBsGA1UEAwwUaWRwdGVzdC51dGRhbGxhcy5lZHUwHhcNMTgwNTE4MjA0 NjQ4WhcNMzgwNTE4MjA0NjQ4WjAfMR0wGwYDVQQDDBRpZHB0ZXN0LnV0ZGFsbGFz LmVkdTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMBjXWrG12/hfyxk 5l11ol45zMH2Lcunliex1UEiEgBR+i4vdebomf6rBc8M6aNUeO2SOybkmq0y4vej zRxZaeFq8gPAJuoK65BPQXxnUV3WVIdpzysB2DocLH5Zc2HhXIfezqmrYNMqEr23 DxbwAxqN5wzStHC71lVgGDf8gCxd/rXEAH4zO//kLMBBvx1o29E4vq1QCtdXgWp5 EbR2MYWGIJxQDoQsC0g++s46NyPrK/eSS4rnALsvga+FnqnSPvkxvbZiqVOOWANI DElLWvQf2bpkXfQHr4M3vS5xDPHqi3rf1Q8utV8DB17OxEcayUJ0WgPUGy9X1crt 2xKhfY0CAwEAAaNvMG0wHQYDVR0OBBYEFPee3rOrxiG+B6MYhLLQXEitQwt7MEwG A1UdEQRFMEOCFGlkcHRlc3QudXRkYWxsYXMuZWR1hitodHRwczovL2lkcHRlc3Qu dXRkYWxsYXMuZWR1L2lkcC9zaGliYm9sZXRoMA0GCSqGSIb3DQEBCwUAA4IBAQAC ZJMjP11ZuGeL6mAsUEthdxS1rvF2zkz5Z3pYVXx/L7zWPxrnBpabQr/0Kvv2cQ6y TAPerZmjWgj1vO9NXqpT3YlhO2ppN18suSW1gVteUizwxcxlqxTxAJuIPUQ16bZV U6r6ADW8qp1YCLqB/3cL2g2L4IX57HZ3qf5OKW1xrkvOjmk0HdDE3ljmjgrbWgwA MBxYkSc2v22K54iOV4TQe76nu4GEIqHzy6qx0SzCcY8C6XxIMC5/Ei1kEqG8Kc5n g5YLcRVlHNcSXgV4OZjzwFbWe0iTBowJGoEaDi3PNJYnpak0BE3D4LBMiPpwfPCI jKqHLsU+tGzjCoNN9hmu'
}
*/



//saves user info so they stayed signed in
passport.serializeUser((user, done) => {
    done(null, user);
});

//this signs user out
passport.deserializeUser((user, done) => {
    done(null, user);
});

// SAML strategy for passport
const strategy = new passportSaml.Strategy(
    {
      entryPoint: process.env.SSO_ENTRYPOINT,
      issuer: process.env.SSO_ISSUER,
      cert: process.env.SSO_CERT,
    },
    (profile, done) => done(null, profile),
  );
  
  passport.use(strategy);
  
  module.exports = passport;

